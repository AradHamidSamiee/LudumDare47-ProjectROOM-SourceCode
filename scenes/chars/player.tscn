[gd_scene load_steps=15 format=2]

[ext_resource path="res://scenes/chars/player.gd" type="Script" id=1]
[ext_resource path="res://scenes/audio/environment_noise.wav" type="AudioStream" id=2]
[ext_resource path="res://scenes/chars/player_labels.tres" type="DynamicFont" id=3]
[ext_resource path="res://scenes/textures/wsad.png" type="Texture" id=4]
[ext_resource path="res://scenes/textures/mouse.png" type="Texture" id=5]
[ext_resource path="res://set_env.tres" type="Environment" id=6]
[ext_resource path="res://scenes/audio/footsteps_normal.wav" type="AudioStream" id=7]
[ext_resource path="res://scenes/audio/fall.wav" type="AudioStream" id=8]

[sub_resource type="BoxShape" id=1]
extents = Vector3( 14, 4, 16 )

[sub_resource type="CapsuleShape" id=2]
radius = 0.6
height = 1.8

[sub_resource type="Animation" id=3]
tracks/0/type = "value"
tracks/0/path = NodePath("tutorial_handler:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ) ]
}

[sub_resource type="Animation" id=4]
tracks/0/type = "value"
tracks/0/path = NodePath("tutorial_handler:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="Shader" id=5]
code = "shader_type canvas_item;

uniform float boost : hint_range(1.0, 2.0, 0.01) = float(1.2);
uniform float grille_opacity : hint_range(0.0, 1.0, 0.01) = float(0.85);
uniform float scanlines_opacity : hint_range(0.0, 1.0, 0.01) = float(0.95);
uniform float vignette_opacity : hint_range(0.1, 0.5, 0.01) = float(0.2);
uniform float scanlines_speed : hint_range(0.0, 1.0, 0.01) = float(1.0);
uniform bool show_grille = true;
uniform bool show_scanlines = true;
uniform bool show_vignette = true;
uniform bool show_curvature = true; // Curvature works best on stretch mode 2d.
uniform vec2 screen_size = vec2(320.0, 180.0);
uniform float aberration_amount : hint_range(0.0, 10.0, 1.0) = float(0.0);
uniform bool move_aberration = false;
uniform float aberration_speed : hint_range(0.01, 10.0, 0.01) = float(1.0);

vec2 CRTCurveUV(vec2 uv) {
	if(show_curvature) {
		uv = uv * 2.0 - 1.0;
		vec2 offset = abs(uv.yx) / vec2(6.0, 4.0);
		uv = uv + uv * offset * offset;
		uv = uv * 0.5 + 0.5;
	}
	return uv;
}

void DrawVignette(inout vec3 color, vec2 uv) {
	if(show_vignette) {
		float vignette = uv.x * uv.y * (1.0 - uv.x) * (1.0 - uv.y);
		vignette = clamp(pow((screen_size.x / 4.0) * vignette, vignette_opacity), 0.0, 1.0);
		color *= vignette;
	} else {
		return;
	}
}

void DrawScanline(inout vec3 color, vec2 uv, float time) {
	float scanline = clamp((scanlines_opacity - 0.05) + 0.05 * sin(3.1415926535 * (uv.y + 0.008 * time) * screen_size.y), 0.0, 1.0);
	float grille = (grille_opacity - 0.15) + 0.15 * clamp(1.5 * sin(3.1415926535 * uv.x * screen_size.x), 0.0, 1.0);

	if (show_scanlines) {
		color *= scanline;
	}

	if (show_grille) {
		color *= grille;
	}

	color *= boost;
}

void fragment() {
	vec2 screen_crtUV = CRTCurveUV(SCREEN_UV);
	vec3 color = texture(SCREEN_TEXTURE, screen_crtUV).rgb;
	
	if (aberration_amount > 0.0) {
		float adjusted_amount = aberration_amount / screen_size.x;
		
		if (move_aberration == true) {
			adjusted_amount = (aberration_amount / screen_size.x) * cos((2.0 * 3.14159265359) * (TIME / aberration_speed));
		} 
		
		color.r = texture(SCREEN_TEXTURE, vec2(screen_crtUV.x + adjusted_amount, screen_crtUV.y)).r;
		color.g = texture(SCREEN_TEXTURE, screen_crtUV).g;
		color.b = texture(SCREEN_TEXTURE, vec2(screen_crtUV.x - adjusted_amount, screen_crtUV.y)).b;
	}
	
	vec2 crtUV = CRTCurveUV(UV);
	if (crtUV.x < 0.0 || crtUV.x > 1.0 || crtUV.y < 0.0 || crtUV.y > 1.0) {
		color = vec3(0.0, 0.0, 0.0);
	}
	
	DrawVignette(color, crtUV);
	DrawScanline(color, crtUV, TIME * scanlines_speed);
	
	COLOR = vec4(color, 1.0);
}"

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 5 )
shader_param/boost = 1.2
shader_param/grille_opacity = 0.85
shader_param/scanlines_opacity = 0.95
shader_param/vignette_opacity = 0.2
shader_param/scanlines_speed = 1.0
shader_param/show_grille = false
shader_param/show_scanlines = true
shader_param/show_vignette = true
shader_param/show_curvature = true
shader_param/screen_size = Vector2( 320, 180 )
shader_param/aberration_amount = 0.0
shader_param/move_aberration = false
shader_param/aberration_speed = 1.0

[node name="player" type="KinematicBody"]
collision_layer = 3
collision_mask = 3
script = ExtResource( 1 )

[node name="head" type="Spatial" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0 )

[node name="Camera" type="Camera" parent="head"]
keep_aspect = 0
environment = ExtResource( 6 )
current = true
fov = 90.0

[node name="jumpscare_handler" type="Area" parent="head/Camera"]
collision_layer = 4
collision_mask = 4

[node name="CollisionShape" type="CollisionShape" parent="head/Camera/jumpscare_handler"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -18 )
shape = SubResource( 1 )

[node name="CollisionShape" type="CollisionShape" parent="."]
transform = Transform( 1, 0, 0, 0, -1.62921e-07, -1, 0, 1, -1.62921e-07, 0, 0, 0 )
shape = SubResource( 2 )

[node name="ground_check" type="RayCast" parent="."]

[node name="head_bonker" type="RayCast" parent="."]

[node name="tutorial" type="AnimationPlayer" parent="."]
anims/tutorial_down = SubResource( 3 )
anims/tutorial_up = SubResource( 4 )

[node name="tutorial_handler" type="Control" parent="."]
modulate = Color( 1, 1, 1, 0 )
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="wasd" type="TextureRect" parent="tutorial_handler"]
anchor_left = 0.7
anchor_top = 0.8
anchor_right = 0.9
anchor_bottom = 0.95
margin_left = -0.160156
margin_top = 0.079895
margin_right = 0.359863
margin_bottom = 0.43988
texture = ExtResource( 4 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false
}

[node name="mouse" type="TextureRect" parent="tutorial_handler"]
anchor_left = 0.7
anchor_top = 0.6
anchor_right = 0.9
anchor_bottom = 0.75
margin_left = 0.319946
margin_right = -0.00012207
margin_bottom = -6.10352e-05
texture = ExtResource( 5 )
expand = true
stretch_mode = 6

[node name="status" type="Label" parent="."]
anchor_left = 0.02
anchor_top = 0.05
anchor_right = 0.15
anchor_bottom = 0.15
custom_fonts/font = ExtResource( 3 )
custom_colors/font_color = Color( 1, 0, 0, 1 )
text = "STATUS: Subsist
"
valign = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="time" type="Label" parent="."]
anchor_left = 0.02
anchor_top = 0.85
anchor_right = 0.2
anchor_bottom = 0.95
custom_fonts/font = ExtResource( 3 )
custom_colors/font_color = Color( 1, 0, 0, 1 )
text = "00 : 00 : 00"
valign = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="crt" type="ColorRect" parent="."]
material = SubResource( 6 )
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_lock_": true,
"_edit_use_anchors_": false
}

[node name="AudioStreamPlayer" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 2 )
autoplay = true

[node name="footsteps" type="AudioStreamPlayer3D" parent="."]
stream = ExtResource( 7 )
bus = "New Bus"

[node name="fall" type="AudioStreamPlayer3D" parent="."]
stream = ExtResource( 8 )
bus = "New Bus"

[node name="Timer" type="Timer" parent="fall"]
wait_time = 0.75
one_shot = true
[connection signal="body_entered" from="head/Camera/jumpscare_handler" to="." method="_on_jumpscare_handler_body_entered"]
[connection signal="timeout" from="fall/Timer" to="." method="_on_Timer_timeout"]
